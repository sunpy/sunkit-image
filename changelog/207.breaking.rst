**New Coalignment API in sunkit_image.coalignment**

The new coalignment API, developed as part of GSoC 2024, addresses the need for a more precise and flexible approach to image coalignment within the `sunkit_image.coalignment` module.
As solar imaging data continues to grow in complexity, the existing coalignment functions from ``sunpy.image.coalignment`` and ``sunpy.physics.solar_rotation`` were found to be scattered and lacked a unified interface, leading to confusion and redundant code.

**New Features:**

- **Coalignment Interface** (`sunkit_image.coalignment.interface`):

  - ``coalign`` function: A high-level function for image coalignment with a specified method. Default method: :func:`~sunkit_image.coalignment.match_template.match_template_coalign`.
  - ``AffineParams`` NamedTuple: Stores and passes affine transformation parameters.

- **Template Matching Coalignment** (`sunkit_image.coalignment.match_template`):

  - ``match_template_coalign`` function: A coalignment method that uses template matching.

- **Decorator Utility** (`sunkit_image.coalignment.decorators`):

  - ``register_coalignment_method`` decorator: Enables easy registration of coalignment methods.
  - Global Registry: Maintains a dictionary of registered coalignment methods.

**Enhancements:**

- Improved Metadata Handling: Updates WCS metadata based on affine transformation parameters.
- User Warnings: Alerts users to significant spatial or temporal separations between maps.

**Documentation:**

- All functions are well-documented in the API reference.

**Examples**

- Please find the examples related to the :ref:`adding of coalignment method <sunkit-image-how-to-guide-add-a-new-coalignment-method>` and using a coalignment method here :ref:`sphx_glr_generated_gallery_aligning_aia_with_eis_maps.py`
